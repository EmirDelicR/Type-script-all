"use strict";
class Table {
    constructor() {
        this.x = [];
        this.y = [];
        this.data = [
            { x: "Col1", y: "Row1", value: true },
            { x: "Col2", y: "Row3", value: true }
        ];
    }
    /* Step 1 */
    setWrapper(wrap) {
        return (this.wrapper = wrap);
    }
    /* Step 2 */
    draw() {
        if (!this.wrapper) {
            console.log("Error! No wrapper!");
            return;
        }
        this.wrapper.innerHTML = "";
        /* Step 3 */
        let tableDom = this.buildTableDom();
        this.wrapper.append(tableDom);
        this.initEvents();
        this.loggingData();
    }
    /* Step 3 */
    buildTableDom() {
        let tableDom = document.createElement("table");
        tableDom.classList.add("table");
        let tableHeaders = this.buildTableHeaders(); /* Step 4 */
        tableDom.append(tableHeaders);
        let tableBody = this.buildTableBody(); /* Step 5 */
        tableDom.append(tableBody);
        return tableDom;
    }
    /* Step 4 */
    buildTableHeaders() {
        let tableHead = document.createElement("thead");
        let tableHeadRow = document.createElement("tr");
        let emptyCell = document.createElement("th");
        tableHeadRow.append(emptyCell);
        for (let thName of this.x) {
            let headCell = document.createElement("th");
            headCell.innerHTML = thName;
            tableHeadRow.append(headCell);
        }
        tableHead.append(tableHeadRow);
        return tableHead;
    }
    /* Step 5 */
    buildTableBody() {
        let tableBodyDom = document.createElement("tbody");
        for (let i in this.y) {
            let y = +i;
            let tableBodyRow = this.buildTableBodyRow(y); /* Step 6 */
            tableBodyDom.append(tableBodyRow);
        }
        return tableBodyDom;
    }
    /* Step 6 */
    buildTableBodyRow(rowIndex) {
        let rowDom = document.createElement("tr");
        let rowName = this.y[rowIndex];
        let rowNameCell = document.createElement("td");
        rowNameCell.innerHTML = rowName;
        rowDom.append(rowNameCell);
        for (let i in this.x) {
            let y = +i;
            let tableCellDom = this.buildTableCellDom(y, rowIndex); /* Step 7 */
            rowDom.append(tableCellDom);
        }
        return rowDom;
    }
    /* Step 7 */
    buildTableCellDom(colIndex, rowIndex) {
        let cellDom = document.createElement("td");
        let rowName = this.y[rowIndex];
        let colName = this.x[colIndex];
        let cellValue = false;
        let dataPair = this.data.filter(function (obj) {
            return obj.x == colName && obj.y == rowName;
        });
        if (dataPair.length > 0 && dataPair[0].value) {
            cellValue = true;
        }
        let checkBox = document.createElement("input");
        checkBox.setAttribute("type", "checkbox");
        if (cellValue) {
            checkBox.setAttribute("checked", "checked");
        }
        let checkBoxData = { colIndex: colIndex, rowIndex: rowIndex };
        checkBox.dataset.position = JSON.stringify(checkBoxData);
        cellDom.append(checkBox);
        return cellDom;
    }
    /* Step 8 */
    initEvents() {
        if (this.wrapper) {
            this.wrapper.addEventListener("change", event => {
                if (!event.target) {
                    return;
                }
                let checkBox = event.target;
                const checkBoxData = checkBox.dataset.position;
                /* Step 9 */
                if (!checkBoxData) {
                    return;
                }
                const data = JSON.parse(checkBoxData) || {
                    colIndex: -1,
                    rowIndex: -1
                };
                let value = checkBox.checked;
                this.addDataPairByIndex(data.rowIndex, data.colIndex, value);
                // this.draw();
            });
        }
    }
    /* Step 9 */
    addDataPairByIndex(rowIndex, colIndex, value) {
        let colName = this.x[colIndex];
        let rowName = this.y[rowIndex];
        let dataPair = { x: colName, y: rowName, value: value };
        this.addDataPair(dataPair);
    }
    /* Step 10 */
    addDataPair(dataPair) {
        let index = null;
        for (let i in this.data) {
            if (this.data[i].x == dataPair.x && this.data[i].y == dataPair.y) {
                index = parseInt(i);
            }
        }
        if (index !== null) {
            this.data[index] = dataPair;
        }
        else {
            this.data.push(dataPair);
        }
    }
    /* Step 11 */
    addRow(rowName) {
        this.y.push(rowName);
    }
    addCol(colName) {
        this.x.push(colName);
    }
    /* Step 12 (For console log data) */
    loggingData() {
        console.log("Data logging: ");
        // console.log("---------------------------------------");
        // console.log("Array x");
        // console.log(this.x);
        // console.log("---------------------------------------");
        // console.log("Array y");
        // console.log(this.y);
        // console.log("---------------------------------------");
        console.log("Array data");
        console.log(this.data);
        console.log("#######################################");
    }
}
const initDomState = () => {
    let test = new Table();
    let tableWrapper = document.getElementById("tableWrapper");
    test.setWrapper(tableWrapper);
    /* Enter the data */
    let axes = {
        x: ["Col1", "Col2", "Col3", "Col4", "Col5"],
        y: ["Row1", "Row2", "Row3"]
    };
    for (let i of axes.y) {
        test.addRow(i);
    }
    for (let i of axes.x) {
        test.addCol(i);
    }
    test.draw();
};
const domReady = (callBack) => {
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", callBack);
    }
    if (document.readyState === "interactive") {
        callBack();
    }
};
domReady(initDomState);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
